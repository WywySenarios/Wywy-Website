---
const { UID, leftPos, endLocations, duration = 5000, itemsToGenerate, path = "/falling_screens/wywy/", rotationBounds = [-270, 270] } = Astro.props;

interface Props {
    UID: string[]; // UID to be a string with no spaces
    leftPos: string[]; // leftPos to be an integer thing
    endLocations: number[][];
    duration?: number;
    itemsToGenerate: ReadonlyArray<[string, number]>
    path?: string;
    rotationBounds?: ReadonlyArray<number>;
}

let indexes: number[] = [];
for (let i in UID) {
    indexes.push(parseInt(i));
}

let numItems: number = 0;
for (let i of itemsToGenerate) {
    numItems += i[1];
}
---

{
    indexes.map((index) => {
        return itemsToGenerate.map((i) => {
            return (
                <img
                    src={path + i[0] + ".jpg"}
                    class={"fallingItem " + UID[index]}
                    style={"left:" + leftPos[index] + "vw"}
                />
                <img
                    src={path + i[0] + ".jpg"}
                    class={"fallingItem " + UID[index] + "dupe"}
                    style={"left:" + leftPos[index] + "vw"}
                />
            );
        });
    })
}

<style>
    .fallingItem {
        top: 0;
        position: absolute;
        height: min(5vh, 5vw);
        width: min(5vh, 5vw);
    }
</style>

<script
    is:inline
    src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.2/anime.js"
></script>
<script is:inline define:vars={{ itemsToGenerate, numItems, path, UID, endLocations, duration, rotationBounds }}
>

    function triggerAnimation(extraTag) {
        index = parseInt(this)

        anime({
            targets: "." + UID[index] + extraTag,
            loop: true,
            left: function () {
                let pos = anime.random(endLocations[index][0], endLocations[index][1]) + "vw"
                return (
                    [pos, pos]
                );
            },
            translateY: "100vh",
            duration: duration,
            rotate: function() {
                return anime.random(rotationBounds[0], rotationBounds[1]);
            },
            easing: "linear",
            delay: anime.stagger(duration / 10, {}),
        });
    }

    for (i in UID) {
        let functionToRun = triggerAnimation.bind(i, "")
        functionToRun();

        setTimeout(triggerAnimation.bind(i, "dupe"), duration - duration / numItems * 2);
    }
</script>
