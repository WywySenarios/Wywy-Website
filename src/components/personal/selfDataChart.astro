---
interface Props {
    chartID: string;
    datapoints: string[];
}

let { chartID, datapoints } = Astro.props;

let charts = {};
---

<button id={chartID + " regenerateChart"}>Regenerate Chart</button>
<table style="border-collapse: collapse; width: 85vw;">
    <thead>
        <tr>
            <th style="border-bottom: solid 2px black;">Chart Settings</th>
            <th
                style="border-bottom: solid 2px black;border-left: solid 2px black;"
                >Chart</th
            >
        </tr>
    </thead>
    <tbody>
        <tr>
            <th style="text-align: left; p {font-size: 5px}">
                <div id={chartID + " select"}>
                    <p>X-axis:</p>
                    <select name={chartID + " x-axis"} id={chartID + " x-axis"}>
                        {
                            datapoints.map((datum: string) => {
                                return <option value={datum}>{datum}</option>;
                            })
                        }
                    </select>
                    <p>Y-axis:</p>
                    <select name={chartID + " y-axis"} id={chartID + " y-axis"}>
                        {
                            datapoints.map((datum: string) => {
                                return <option value={datum}>{datum}</option>;
                            })
                        }
                    </select>
                </div>

                <br />
                <p>Regression results:</p>
                <p id={chartID + " regression results"}></p>
            </th>
            <th style="width:100%;border-left: solid 2px black;"
                ><canvas id={chartID} class="chart"></canvas>
            </th>
        </tr>
    </tbody>
</table>

<script is:inline define:vars={{ charts, chartID }}>
    // custom plugin made by me to draw a regression line!
    const drawLinearLine = {
        id: "drawLinearLine",
        beforeDraw(chart, args, options) {
            const {
                ctx,
                chartArea: { top, right, bottom, left, width, height },
                scales: { x, y },
            } = chart;
            ctx.save();

            // check if regression has been successfully passed in or not:
            if (chart.options.regressionEquation != undefined) {
                ctx.strokeStyle = "#a41759"; // stroke color
                ctx.beginPath(); // prepare to draw

                // y value is calculated using regresion thing!
                let yPoints = [
                    chart.options.regressionEquation[0] * x.min +
                        chart.options.regressionEquation[1],
                        chart.options.regressionEquation[0] * x.max +
                        chart.options.regressionEquation[1],
                ];
                // clamp y-values
                // if (yPoints[0] < y.min) { // beginning value too small
                //     // since this is a linear equation, just look for an intersection with the minimum y value.

                // }

                // draw the line
                ctx.moveTo(
                    x.getPixelForValue(x.min),
                    y.getPixelForValue(yPoints[0]),
                );
                ctx.lineTo(
                    x.getPixelForValue(x.max),
                    y.getPixelForValue(yPoints[1]),
                );
                ctx.stroke();
                ctx.restore();
            }
        },
    };

    document
        .getElementById(chartID + " regenerateChart")
        .addEventListener("click", () => {
            chart();
        });

    /*
     * @param x is the name of the header that is used for the x-axis values
     * @param y is the name of the header that is used for the y-axis values
     */
    async function getChartData(x, y) {
        try {
            let response = await fetch(
                "/personal/chart" + "?x-axis=" + x + "&y-axis=" + y,
                {
                    method: "GET",
                },
            );

            return response.json();
        } catch (error) {
            console.error(`ERROR: ${error.message}\n\nGraph will now be empty`);
            return [];
        }
    }

    // returns the chart that has been set
    async function setChart(chartElement, x, y) {
        let dataIn = await getChartData(x, y);
        // let chartDatasets = [];
        // chartDatasets.push(dataIn["content"]);

        // display regression data to user
        document.getElementById(chartID + " regression results").innerText =
            dataIn["regression"]["string"] +
            " R^2=" +
            dataIn["regression"]["r2"];

        return new Chart(chartElement, {
            type: "scatter",
            data: {
                datasets: [
                    {
                        label:
                            dataIn["x-axis"]["name"] +
                            " vs. " +
                            dataIn["y-axis"]["name"],
                        data: dataIn["content"],
                        backgroundColor: "hsl(287, 57%, 21%, 0.65)",
                    },
                ],
            },
            options: {
                regressionEquation: dataIn["regression"]["equation"],
                scales: {
                    x: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: dataIn["x-axis"]["name"],
                        },
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: dataIn["y-axis"]["name"],
                        },
                    },
                },
            },
            plugins: [drawLinearLine],
        });
    }

    async function chart() {
        try {
            charts[chartID].destroy();
        } catch (error) {} // delete a chart if it's already there so a new one may be generated

        charts[chartID] = await setChart(
            document.getElementById(chartID),
            document.getElementById(chartID + " x-axis").value,
            document.getElementById(chartID + " y-axis").value,
        );
    }
</script>
