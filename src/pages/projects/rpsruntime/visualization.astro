---
import Layout from "@/layouts/Layout.astro";
import Chart from "@/components/rpsruntime/chart.astro";
---

<Layout
    title="Visualization"
    css_color_palette="sunset"
    iconPath="/RPSRuntime/assets/rock-paper-scissors.png"
>
    <input
        slot="top-bar-button2"
        type="button"
        onclick="location.href='visualization';"
        value="Results"
    />
    <input
        slot="top-bar-button3"
        type="button"
        onclick="location.href='run';"
        value="Play"
    />

    <main id="mainBody">
        <h1>What is "Runtime"?</h1>
        <p>
            <a
                href="https://www.techtarget.com/searchsoftwarequality/definition/runtime#:~:text=When%20written%20as%20two%20words,runtime%20error%20and%20runtime%20metrics."
                >Runtime</a
            >, or run time, not to be confused with <a
                href="https://en.wikipedia.org/wiki/Execution_(computing)#Runtime"
                >runtime</a
            > is the amount of time it takes for a computer to run a program, usually
            measured in nanoseconds or milliseconds.
        </p>
        <br />
        <p>
            Runtime is used as a general metric of how resource intensive a
            computer program is for a <a
                href="https://en.wikipedia.org/wiki/Central_processing_unit"
                >CPU</a
            >; computer programs with a lower runtime are usually considered
            "better".
        </p>
        <br />
        <p>
            Some factors that affect runtime are: the algorithm, the current
            state of the hardware (including factors such as the temperature of
            the <a href="https://en.wikipedia.org/wiki/Central_processing_unit"
                >CPU</a
            >); <a href="https://en.wikipedia.org/wiki/Operating_system">OS</a>,
            and the compiler being used in addition to any other programs that
            are being run simultaneously.
        </p>
        <br />
        <p>
            Since algorithms are usually ranked based on their runtime, this
            experiment aims to find the best Rock Paper Scissors algorithm by
            finding the algorithm with the lowest runtime while controlling for
            hardware differences.
        </p>

        <h1>Interactive Chart</h1>

        <br />

        <script
    src="https://cdn.jsdelivr.net/npm/chart.js@4.4.5/dist/chart.umd.min.js"
    is:inline></script>
        <Chart chartID="chart1"/>
        <Chart chartID="chart2"/>
        <Chart chartID="chart3"/>
        <Chart chartID="chart4"/>
        <br>

    </main>

    <div slot="attributions">
        <a
            href="https://www.flaticon.com/free-icons/rock-paper-scissors"
            title="rock paper scissors icons"
            >Rock paper scissors icons created by Freepik - Flaticon</a
        >
        <a
            href="https://commons.wikimedia.org/wiki/File:Rock-paper-scissors.svg"
            title="rock paper scissors icons"
            >Rock paper scissors diagram created by Enzoklop</a
        >
    </div>
</Layout>

<script is:inline>
    let charts = {};

    // returns [[all names], [[labels, runtime], [labels, runtime], ...], [[labels, runtime], [labels, runtime], ...], ...] or an empty array given an error
    async function getChartData(trialIDs, trialIDToSortBy, algorithmName) {
        try {
            let output = [[]];
            // create empty array with sufficient length
            for (let a = 0; a < trialIDs.length; a++) {output.push([[], []]);}

            let trialIDsString = "";

            for (const i of trialIDs) {
                trialIDsString += "," + i;
            }
            trialIDsString = trialIDsString.substring(1, trialIDsString.length);

            let response = await fetch(
                "/projects/rpsruntime/chart" +
                    "?trialID=" +
                    trialIDsString +
                    "&sortBy=" +
                    trialIDToSortBy +
                    "," +
                    algorithmName,
                {
                    method: "GET",
                },
            );
            
            let dataIn = await response.json();
            let contentIn = dataIn["content"];

            // traverse through data
            for (const i of contentIn) {
                // record name
                output[0].push(i["name"]);
                for (let a = 0; a < trialIDs.length; a++) { // order should be correct already when passing into this function, do not worry about order.
                    output[a + 1][0].push("Runtime Ascending Order Trial " + trialIDs[a]);
                    output[a + 1][1].push(i[trialIDs[a]][algorithmName]);
                }
            }
            console.log(output);

            return output;
        } catch (error) {
            console.error(`ERROR: ${error.message}\n\nGraph will now be empty`);
            return [];
        }
    }

    // returns the chart that has been set
    async function setChart(trialIDs, trialIDToSortBy, algorithmName, chartElement, chartType) {
        let dataIn = await getChartData(trialIDs, trialIDToSortBy, algorithmName);
        let chartDatasets = [];
        for (let i = 1; i < dataIn.length; i++) {
            chartDatasets.push({
                label: "Runtime Ascending Order Trial " + trialIDs[i - 1],
                data: dataIn[i][1],
                borderWidth: 1,
            });
        }

        console.log(chartDatasets);

        return await new Chart(chartElement, {
            type: chartType,
            data: {
                labels: dataIn[0],
                datasets: chartDatasets,
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                    },
                },
            },
        });
    }

    async function chart(id) {
        try {
            charts[id].destroy();
        } catch (error) {} // delete a chart if it's already there so a new one may be generated

        let trialIDs = [];
        let elements = document.getElementById(id + " select").children;
        for (const i of elements) {
            if (i.checked == true) {
                trialIDs.push(i.id);
            }
        }

        if (trialIDs.length == 0) { // Abort if there are no datasets
            return;
        }

        charts[id] = await setChart(
            trialIDs,
            document.getElementById(id + " sortBy").value,
            document.getElementById(id + " algorithm").value,
            document.getElementById(id),
            document.getElementById(id + " chart type").value,
        );
    }

    function selectAll(id) {
        let elements = document.getElementById(id + " select").children;
        for (const i of elements) {
            if (i.type == "checkbox") {
                i.checked = true;
            }
        }
    }
</script>

<style>
    main {
        margin: auto;
        font-size: 12px;
        line-height: 1.6;
        text-align: center;
    }
    h1 {
        font-size: 24px;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        margin-bottom: 1em;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
    .link-card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
        gap: 2rem;
        padding: 0;
    }
</style>
