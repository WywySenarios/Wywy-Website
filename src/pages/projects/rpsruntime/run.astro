---

export const prerender = true;
import Layout from "@/layouts/Layout.astro";


---

<Layout
    title="Run"
    css_color_palette="sunset"
    iconPath="/RPSRuntime/assets/rock-paper-scissors.png"
    useAstroDefaultCSS={false}
>
    <input
        slot="top-bar-button2"
        type="button"
        onclick="location.href='visualization';"
        value="Results"
    />
    <input
        slot="top-bar-button3"
        type="button"
        onclick="location.href='run';"
        value="Play"
    />

    <main>
        <p>
            Don't worry about filling in all the form---fill in all you know and
            leave anything that you don't know blank.
        </p>
        <br />
        <h1>How to get PC information</h1>
        <p>
            Windows PC: type "about" in the windows search bar & you should be
            taken to a settings page with all the necessary specs listed under
            the device name, "Device specifications", and "Windows
            specifications".
        </p>
        <br />
        <p>
            Mac: type "About this Mac" or "About" in the Mac search bar. All the
            necessary information should be provided.
        </p>
        <br />
        <p>
            ChromeBook: To find the hardware specs of a chromebook, type "about"
            in the ChromeOS search bar (NOT CHROME).
        </p>
        <p>
            To find the OS version of a chromebook, type "about ChromeOS" in the
            ChromeOS search bar (NOT CHROME); and then click on "additional
            details", and then click on "build details". The OS version should
            be the first line of relevant information.
        </p>
        <br />
        <h1>How to get Phone information</h1>
        <p>
            iPhone: Go to settings, "general", and then "about". Important
            hardware information can be found by searching the model number
            online.
        </p>
        <br />
        <p>
            Android: Go to settings, "System" , and then "About phone" or
            "about". Alternatively, go to settings and then "About phone". The
            device name, model, hardware specs, and OS version should all be
            visible.
        </p>
        <h1>The Form</h1>
        <form>
            <p>Device Model (e.g. iPhone 14 or Macbook Pro)</p>
            <input type="text" id="device model" />
            <br />
            <p>Are you using Windows 11?</p>
            <input type="checkbox" id="windows11" />
            <br />
            <!-- <p>Operating System Type</p>
            <select name="OS" id="OS">
                <option value="Windows 11">Windows 11</option>
                <option value="Windows 10">Windows 10</option>
                <option value="Linux">Linux</option>
                <option value="macOS">Mac OS</option>
                Negligible difference between iPhone & iPad
                <option value="iOS">Apple Phones & iPads (iOS or iPadOS)</option>
                <option value="watchOS">Apple Watches (watchOS)</option>
                <option value="Android">Android</option>
                <option value="other">Other</option>
            </select> -->
            <p>System type (leave blank if unknown)</p>
            <select name="system type" id="system type">
                <option value="unknown">IDK</option>
                <option value="x32">x32</option>
                <option value="x64">x64</option>
                <option value="x86">x86</option>
            </select>
            <br />
            <br />
            <p>
                Processor Model (e.g. Intel(R) Core(TM) i7-8550U) (refer to "How
                to get PC Information" or "How to get Phone information"
                paragraphs above for how to find out this information)
            </p>
            <input type="text" id="processor" />
            <br />
            <br />
            <p>
                CPU clock speed (GHz) (Many devices don't tell you this
                information) (Leave blank if unknown)
            </p>
            <input type="text" id="CPU clock speed" />
            <br />
            <br />
            <p>
                OS Version (e.g. "22631.4317") (refer to "How to get PC
                Information" or "How to get Phone information" paragraphs above
                for how to find out this information)
            </p>
            <input type="text" id="OS version" />
            <br />
            <br />
            <p>
                Specify any special software modifications you have made to your
                computer:
            </p>
            <input type="text" id="modifications" />
            <br />
            <br />
            <p>
                Website task priority (e.g. "High") (leave as "Unset" if
                unknown)
            </p>
            <select name="website priority" id="website priority">
                <option value="Unset">Unset</option>
                <option value="Efficiency Mode">Efficiency Mode</option>
                <option value="Low">Low</option>
                <option value="Below Normal">Below Normal</option>
                <option value="Normal">Normal</option>
                <option value="Above Normal">Above Normal</option>
                <option value="High">High</option>
                <option value="Realtime">Realtime</option>
            </select>
            <br />
            <br />
            <p>Device Age in Years</p>
            <input
                type="range"
                id="device age"
                min="0"
                max="12"
                value="2"
                oninput="this.nextElementSibling.value = this.value"
            />
            <output>2</output>
            <br />
            <br />
            <p>
                Device RAM or Memory in GB (refer to "How to get PC Information"
                or "How to get Phone information" paragraphs above for how to
                find out this information)
            </p>
            <input
                type="range"
                id="memory"
                min="2"
                max="32"
                value="8"
                oninput="this.nextElementSibling.value = this.value"
            />
            <output>8</output>
            <br />
            <br />
            <p>
                Name or Device Name (e.g. DESKTOP-4MC7FUG) (you can put a fake
                one if you'd like!)
            </p>
            <input type="text" id="name" minlength="1" maxlength="" />
            <br />
            <br />
        </form>
        <input type="button" id="run" onclick="runInit()" value="Run" />
        <label id="statusLabel" for="status">Status: Idle</label>
        <!-- 23 * 4 = 92 tests -->
        <progress id="status" style="width: 100%;" value="0" max="92"
        ></progress>

        <table id="runtimeTable">
            <tr>
                <th></th>
                <th>Standard Algorithm</th>
                <th>Optimized Algorithm</th>
                <th>Zeroes Algorithm</th>
                <th>Polynomial Algorithm</th>
            </tr>

            <tr>
                <th>Runtime (ms/100 cases)</th>
                <th id="standard100"></th>
                <th id="optimized100"></th>
                <th id="zeroes100"></th>
                <th id="polynomial100"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000 cases)</th>
                <th id="standard1000"></th>
                <th id="optimized1000"></th>
                <th id="zeroes1000"></th>
                <th id="polynomial1000"></th>
            </tr>
            <tr>
                <th>Runtime (ms/10000 cases)</th>
                <th id="standard10000"></th>
                <th id="optimized10000"></th>
                <th id="zeroes10000"></th>
                <th id="polynomial10000"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.1"></th>
                <th id="optimized100000.1"></th>
                <th id="zeroes100000.1"></th>
                <th id="polynomial100000.1"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.2"></th>
                <th id="optimized100000.2"></th>
                <th id="zeroes100000.2"></th>
                <th id="polynomial100000.2"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.3"></th>
                <th id="optimized100000.3"></th>
                <th id="zeroes100000.3"></th>
                <th id="polynomial100000.3"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.4"></th>
                <th id="optimized100000.4"></th>
                <th id="zeroes100000.4"></th>
                <th id="polynomial100000.4"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.5"></th>
                <th id="optimized100000.5"></th>
                <th id="zeroes100000.5"></th>
                <th id="polynomial100000.5"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.6"></th>
                <th id="optimized100000.6"></th>
                <th id="zeroes100000.6"></th>
                <th id="polynomial100000.6"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.7"></th>
                <th id="optimized100000.7"></th>
                <th id="zeroes100000.7"></th>
                <th id="polynomial100000.7"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.8"></th>
                <th id="optimized100000.8"></th>
                <th id="zeroes100000.8"></th>
                <th id="polynomial100000.8"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.9"></th>
                <th id="optimized100000.9"></th>
                <th id="zeroes100000.9"></th>
                <th id="polynomial100000.9"></th>
            </tr>
            <tr>
                <th>Runtime (ms/100000 cases)</th>
                <th id="standard100000.10"></th>
                <th id="optimized100000.10"></th>
                <th id="zeroes100000.10"></th>
                <th id="polynomial100000.10"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.1"></th>
                <th id="optimized1000000.1"></th>
                <th id="zeroes1000000.1"></th>
                <th id="polynomial1000000.1"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.2"></th>
                <th id="optimized1000000.2"></th>
                <th id="zeroes1000000.2"></th>
                <th id="polynomial1000000.2"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.3"></th>
                <th id="optimized1000000.3"></th>
                <th id="zeroes1000000.3"></th>
                <th id="polynomial1000000.3"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.4"></th>
                <th id="optimized1000000.4"></th>
                <th id="zeroes1000000.4"></th>
                <th id="polynomial1000000.4"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.5"></th>
                <th id="optimized1000000.5"></th>
                <th id="zeroes1000000.5"></th>
                <th id="polynomial1000000.5"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.6"></th>
                <th id="optimized1000000.6"></th>
                <th id="zeroes1000000.6"></th>
                <th id="polynomial1000000.6"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.7"></th>
                <th id="optimized1000000.7"></th>
                <th id="zeroes1000000.7"></th>
                <th id="polynomial1000000.7"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.8"></th>
                <th id="optimized1000000.8"></th>
                <th id="zeroes1000000.8"></th>
                <th id="polynomial1000000.8"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.9"></th>
                <th id="optimized1000000.9"></th>
                <th id="zeroes1000000.9"></th>
                <th id="polynomial1000000.9"></th>
            </tr>
            <tr>
                <th>Runtime (ms/1000000 cases)</th>
                <th id="standard1000000.10"></th>
                <th id="optimized1000000.10"></th>
                <th id="zeroes1000000.10"></th>
                <th id="polynomial1000000.10"></th>
            </tr>
        </table>
        <br />
        <p>
            DISCLAIMER: This is NOT an accurate representation of how "fast" or
            "good" your computer is.
        </p>
    </main>

    <div slot="attributions">
        <a
            href="https://www.flaticon.com/free-icons/rock-paper-scissors"
            title="rock paper scissors icons"
            >Rock paper scissors icons created by Freepik - Flaticon</a
        >
        <a
            href="https://commons.wikimedia.org/wiki/File:Rock-paper-scissors.svg"
            title="rock paper scissors icons"
            >Rock paper scissors diagram created by Enzoklop</a
        >
    </div>
</Layout>

<style>
    main {
        margin: auto;
        font-size: 12px;
        line-height: 1.6;
        text-align: center;
    }
    h1 {
        font-size: 24px;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        margin-bottom: 1em;
    }
    .text-gradient {
        background-image: var(--accent-gradient);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-size: 400%;
        background-position: 0%;
    }
    .link-card-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
        gap: 2rem;
        padding: 0;
    }
</style>

<script is:inline>
    /*
     * games: [[p1, p2], etc.]
     */
    const progressBar = document.getElementById("status");
    const progressLabel = document.getElementById("statusLabel");

    let sleepLength = 0; // sleep length in ms
    let testCases = {
        "100": null,
        "1000": null,
        "10000": null,
        "100000": null,
        "1000000": null,
    };

    // function defaultTestCases() {
    //     return "111213212223313233";
    // }

    async function processTestCases(gamesStr) {
        // console.log(`Test cases to process: ${gamesStr}`);
        let output = Array(0);
        let next = Array(2);
        for (let i = 0; i < gamesStr.length / 2; i++) {
            switch (gamesStr.charAt(2 * i)) {
                case "1":
                    next[0] = 1;
                    break;
                case "2":
                    next[0] = 2;
                    break;
                case "3":
                    next[0] = 3;
                    break;
                default:
                    continue;
            }
            switch (gamesStr.charAt(2 * i + 1)) {
                case "1":
                    next[1] = 1;
                    break;
                case "2":
                    next[1] = 2;
                    break;
                case "3":
                    next[1] = 3;
                    break;
                default:
                    continue;
            }

            output.push([next[0], next[1]]);
        }

        return output;
    }

    window.runInit = async function runInit() {
        progressLabel.innerHTML = "Grabbing Server Test Cases...";
        let rawTestCases = await fetch("fetchTestCases", {
                method: "GET",
            });

        rawTestCases = await rawTestCases.json();

        progressLabel.innerHTML = "Formatting Test Cases...";
        for (const i in rawTestCases) {
            if (i != "sleepLength") {
                testCases[i] = await processTestCases(rawTestCases[i]);
            }
        }

        progressLabel.innerHTML = "Grabbing Specs...";
        let results = {
            specs: {
                "device model": document.getElementById("device model").value,
                "system type": document.getElementById("system type").value,
                processor: document.getElementById("processor").value,
                "CPU clock speed":
                    document.getElementById("CPU clock speed").value,
                os: { version: document.getElementById("OS version").value },
                modifications: document.getElementById("modifications").value,
                "website priority":
                    document.getElementById("website priority").value,
                "device age": document.getElementById("device age").value,
                memory: document.getElementById("memory").value,
            },
            name: document.getElementById("name").value,
            "100": await run("100", ""),
            "1000": await run("1000", ""),
            "10000": await run("10000", ""),
            // "100000": await run("100000", ""),
            "100000.1": await run("100000", ".1"),
            "100000.2": await run("100000", ".2"),
            "100000.3": await run("100000", ".3"),
            "100000.4": await run("100000", ".4"),
            "100000.5": await run("100000", ".5"),
            "100000.6": await run("100000", ".6"),
            "100000.7": await run("100000", ".7"),
            "100000.8": await run("100000", ".8"),
            "100000.9": await run("100000", ".9"),
            "100000.10": await run("100000", ".10"),
            "1000000.1": await run("1000000", ".1"),
            "1000000.2": await run("1000000", ".2"),
            "1000000.3": await run("1000000", ".3"),
            "1000000.4": await run("1000000", ".4"),
            "1000000.5": await run("1000000", ".5"),
            "1000000.6": await run("1000000", ".6"),
            "1000000.7": await run("1000000", ".7"),
            "1000000.8": await run("1000000", ".8"),
            "1000000.9": await run("1000000", ".9"),
            "1000000.10": await run("1000000", ".10"),
        };

        progressLabel.innerHTML = "Gathering Results...";

        // send results to server
        console.log("Data to send: " + JSON.stringify(results));

        // user self-reports using Windows 11 instead of 10?
        console.log(document.getElementById("windows11").value);
        if (document.getElementById("windows11").checked == true) {
            results["os"] = {
                name: "Windows 11",
            };
        }

        progressLabel.innerHTML = "Sending Results to Server...";

        fetch("uploadResults", {
            method: "POST",
            body: JSON.stringify(results),
            // body: await JSON.stringify(results),
            headers: {
                "Content-type": "application/json; charset=UTF-8",
            },
        });

        progressLabel.innerHTML = "Done!";
    };

    // run all algorithms in a random order with "games" as the test cases
    async function run(numTestCases, elementName) {
        let games = testCases[numTestCases];
        // console.log("Test cases: " + games);

        let algorithms = [
            ["standard", RPSstandard],
            ["optimized", RPSoptimized],
            ["zeroes", RPSzeroes],
            ["polynomial", RPSnoComparisons],
        ];
        let results = {
            runtime: {
                standard: NaN,
                optimized: NaN,
                zeroes: NaN,
                polynomial: NaN,
            },
            executionResults: {
                standard: null,
                optimized: null,
                zeroes: null,
                polynomial: null,
            },
        };

        await sleep(sleepLength); // sleep to ensure that CPU usage is spread out and does not severely impact runtime

        // run all algorithms in a random order while keeping track of runtime
        let index = 0;
        let output = null;
        let userOutput = null;
        let currentLength = algorithms.length;
        while (currentLength > 0) {
            index = Math.round(Math.random() * algorithms.length); // pick a random algorithm to run
            if (algorithms[index] == null) {
                continue;
            } else {
                progressLabel.innerHTML =
                    "Testing " +
                    algorithms[index][0] +
                    " algorithm with " +
                    numTestCases +
                    " cases";
                console.log(`Testing algorithm: ${algorithms[index][0]}`);
                currentLength--;
            }
            // console.log(`Index: ${index}, length: ${algorithms.length}`);
            // console.log(algorithms[index]);

            await sleep(sleepLength); // sleep to ensure that CPU usage is spread out and does not severely impact runtime
            output = await algorithms[index][1](games);
            output[0] = Math.round(output[0] * 1000) / 1000; // round to 1 decimal place??

            // console.log(`Output: ${output}`);
            userOutput = document.getElementById(
                algorithms[index][0] + numTestCases + elementName,
            );
            console.log(algorithms[index][0] + numTestCases + elementName);
            // tell user that the program is running!
            userOutput.innerHTML = output[0]; // runtime result
            progressBar.value = parseInt(progressBar.value) + 1;

            results["runtime"][algorithms[index][0]] = output[0];
            results["executionResults"][algorithms[index][0]] = output[1];
            if (!delete algorithms[index]) {
                console.log(
                    'Failed to delete array element. "run()" function failed. Aborting...',
                );
                return;
            }
        }
        // μ

        // console.log(`Execution results: ${results[executionResults]}`);
        // prevent a packet that is too large to process:
        results["executionResults"] = null;

        return results["runtime"];
    }

    async function sleep(ms) {
        await new Promise((r) => setTimeout(r, ms));
    }

    // Below are RPS functions. They return an array with [runtime, execution results].

    async function RPSstandard(games) {
        let results = Array(0);

        runtime = performance.now();
        for (let i = 0; i < games.length; i++) {
            if (games[i][0] == games[i][1]) {
                // tie
                results.push(0);
            } else if (games[i][0] == 1) {
                // p1 rock
                if (games[i][1] == 2) {
                    // p2 papers
                    results.push(2);
                } else {
                    results.push(1);
                }
            } else if (games[i][0] == 2) {
                // p1 paper
                if (games[i][1] == 1) {
                    // p2 rock
                    results.push(1);
                } else {
                    results.push(2);
                }
            } else {
                // p1 scissors
                if (games[i][1] == 2) {
                    // p2 paper
                    results.push(1);
                } else {
                    results.push(2);
                }
            }
        }

        runtime = performance.now() - runtime;
        return [runtime, results];
    }

    // Returns an array with the execution results
    async function RPSoptimized(games) {
        let results = Array(0);

        runtime = performance.now();
        for (let i = 0; i < games.length; i++) {
            if (games[i][0] == games[i][1]) {
                // tie
                results.push(0);
            } else if (
                games[i][0] ==
                (-3 * games[i][1] * games[i][1] + 11 * games[i][1] - 4) / 2
            ) {
                // P1 wins
                // the above quadratic equation converts p2 into a value equal to p1 when P1 wins.
                // this means that the quadratic equation has points (1,3), (2,1), and (3,2)
                results.push(1);
            } else {
                results.push(2);
            }
        }

        runtime = performance.now() - runtime;
        return [runtime, results];
    }

    // Returns an array with the execution results
    async function RPSzeroes(games) {
        let results = Array(0);

        runtime = performance.now();
        for (let i = 0; i < games.length; i++) {
            let game = games[i][0] * 10 + games[i][1]; // [p1][p2]

            if ((game - 11) * (game - 22) * (game - 33) == 0) {
                // tie
                results.push(0);
            } else if ((game - 13) * (game - 21) * (game - 32) == 0) {
                // P1 wins
                results.push(1);
            } else {
                // P2 wins
                results.push(2);
            }
        }

        runtime = performance.now() - runtime;
        return [runtime, results];
    }

    // Returns an array with the execution results
    async function RPSnoComparisons(games) {
        let results = Array(0);

        runtime = performance.now();
        for (let i = 0; i < games.length; i++) {
            /*
             * Polynomial equation that satisfies the following points:
             * (1,1,0) (2,2,0) (3,3,0)
             * (1,3,1) (2,1,1) (3,2,1)
             * (1,2,2) (2,3,2) (3,1,2)
             */
            let x = games[i][0];
            let z = games[i][1];

            results.push(
                Math.round(
                    (x - z) *
                        (x + -2.66069 * z) *
                        (x + -0.753293 * z) *
                        (x + -2.96691 * z) *
                        (x + -0.751818 * z) *
                        (x + -1.48948 * z) *
                        (x + -0.33313 * z) *
                        (x + -0.751626 * z) *
                        (x + -1.05309 * z),
                ),
            );
        }

        runtime = performance.now() - runtime;
        return [runtime, results];
    }
</script>
