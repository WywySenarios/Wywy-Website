services:
  astro-app:
    container_name: astro-dev-server
    restart: always
    working_dir: /apps/astro-app
    build:
      context: ../
      dockerfile: apps/astro-app/Dockerfile.dev
      target: runtime
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
    ports:
      - 4321:4321
    volumes:
      - ../apps/astro-app:/apps/astro-app
      - astro-node_modules:/apps/astro-app/node_modules
    command: npm run dev -- --host

  sql-receptionist:
    container_name: sql-receptionist-dev-server
    tty: true
    # image: gcc:latest
    working_dir: /apps/sql-receptionist
    build:
      context: ../
      dockerfile: apps/sql-receptionist/Dockerfile.dev
      # target: builder
    env_file:
      - path: .env
        required: true
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_USERNAME=${DB_USERNAME}
      - POSTGRES_PORT=5432 #${POSTGRES_PORT}
    develop:
      watch:
        - action: rebuild
          path: ./../apps/sql-receptionist
          target: /
          initial_sync: true
    ports:
      - 2523:2523
    depends_on:
      database:
        condition: service_healthy
    command: bash -c "python3 create_tables.py && ./app"

  # @TODO secrets for db authentication
  database:
    container_name: postgres
    image: postgres
    working_dir: /apps/postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
    ports:
      - 5432:5432
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${DB_USERNAME}" ]
      interval: 5m
      timeout: 5s
      start_period: 3s
      retries: 10
    volumes:
      # - postgres-db:/var/lib/postgresql
      - ./../apps/postgres:/var/lib/postgresql
    shm_size: 128mb

volumes:
  # postgres-db:
  astro-node_modules:
