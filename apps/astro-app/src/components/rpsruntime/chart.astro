---
import BasicChart from "@/components/chart.astro";

interface Props {
    chartID: string;
    datapoints: string[];
}

let { chartID, datapoints } = Astro.props;

let datasetTypes = ["standard", "optimized", "zeroes", "polynomial"];

let charts = {};
---

<BasicChart
    datapoints={datapoints}
    chartID={chartID}
>
    <div slot="datasetTypes">
        <p>Algorithm Name</p>
        <select name={chartID + " datasetType"} id={chartID + " datasetType"}>
            {
                datasetTypes.map((i: string) => {
                    return <option value={i}>{i}</option>;
                })
            }
        </select>
    </div>
</BasicChart>

<script is:inline define:vars={{ charts, chartID }}>
    document
        .getElementById(chartID + " regenerateChart")
        .addEventListener("click", () => {
            chart();
        });
        const autocolors = window['chartjs-plugin-autocolors'];
    // document
    //     .getElementById(chartID + " selectAll")
    //     .addEventListener("click", () => {
    //         selectAll();
    //     });

    // returns [[all names], [[labels, runtime], [labels, runtime], ...], [[labels, runtime], [labels, runtime], ...], ...] or an empty array given an error
    async function getChartData(trialIDs, trialIDToSortBy, algorithmName) {
        try {
            let output = [[]];
            // create empty array with sufficient length
            for (let a = 0; a < trialIDs.length; a++) {
                output.push([[], []]);
            }

            let trialIDsString = "";

            for (const i of trialIDs) {
                trialIDsString += "," + i;
            }
            trialIDsString = trialIDsString.substring(1, trialIDsString.length);

            let response = await fetch(
                "/projects/rpsruntime/chart" +
                    "?trialID=" +
                    trialIDsString +
                    "&sortBy=" +
                    trialIDToSortBy +
                    "," +
                    algorithmName,
                {
                    method: "GET",
                },
            );

            let dataIn = await response.json();
            let contentIn = dataIn["content"];

            // traverse through data
            for (const i of contentIn) {
                // record name
                output[0].push(i["name"]);
                for (let a = 0; a < trialIDs.length; a++) {
                    // order should be correct already when passing into this function, do not worry about order.
                    output[a + 1][0].push(
                        "Runtime Ascending Order Trial " + trialIDs[a],
                    );
                    output[a + 1][1].push(i[trialIDs[a]][algorithmName]);
                }
            }

            return output;
        } catch (error) {
            console.error(`ERROR: ${error.message}\n\nGraph will now be empty`);
            return [];
        }
    }

    // returns the chart that has been set
    async function setChart(
        trialIDs,
        trialIDToSortBy,
        algorithmName,
        chartElement,
        chartType,
    ) {
        let dataIn = await getChartData(
            trialIDs,
            trialIDToSortBy,
            algorithmName,
        );
        let chartDatasets = [];
        for (let i = 1; i < dataIn.length; i++) {
            chartDatasets.push({
                label: "Runtime Ascending Order Trial " + trialIDs[i - 1],
                data: dataIn[i][1],
                borderWidth: 1,
            });
        }

        return new Chart(chartElement, {
            type: chartType,
            data: {
                labels: dataIn[0],
                datasets: chartDatasets,
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true,
                    },
                },
            },
            plugins: [autocolors]
        });;
    }

    async function chart() {
        try {
            charts[chartID].destroy();
        } catch (error) {} // delete a chart if it's already there so a new one may be generated

        let trialIDs = [];
        let elements = document.getElementById(chartID + " select").children;
        for (const i of elements) {
            if (i.checked == true) {
                trialIDs.push(i.id);
            }
        }

        if (trialIDs.length == 0) {
            // Abort if there are no datasets
            return;
        }

        charts[chartID] = await setChart(
            trialIDs,
            document.getElementById(chartID + " sortBy").value,
            document.getElementById(chartID + " datasetType").value,
            document.getElementById(chartID),
            document.getElementById(chartID + " chart type").value,
        );
    }
</script>
